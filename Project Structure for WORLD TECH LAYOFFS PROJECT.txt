## Project Structure

### Remove Duplicates

- **Create a Duplicate Table**: Ensures the original data remains intact.

    ```sql
    CREATE TABLE layoffs_duplicate LIKE layoffs;
    INSERT INTO layoffs_duplicate SELECT * FROM layoffs;
    ```

- **Identify Duplicates**: Use a Common Table Expression (CTE) to assign row numbers to duplicate entries.

    ```sql
    WITH duplicate_cte AS
( SELECT *, 
ROW_NUMBER() OVER (
	PARTITION BY Company, Location_HQ, Industry, Laid_Off_Count, `Date`, `Source`, Funds_Raised, Stage, 
    Date_Added, Country, Percentage, List_of_Employees_Laid_Off
    ) AS row_num
    FROM layoffs_duplicate)
SELECT * 
FROM duplicate_cte
WHERE row_num =1;
    ```

- **Remove Duplicates**: Delete duplicate rows while keeping one unique record per entry.

    ```sql
    DELETE FROM layoffs_duplicate WHERE row_num > 1;
    ```

### Standardize the Data

- **Trim Whitespace**: Clean up unwanted spaces in all the columns and update them.
  
```sql
SELECT company, TRIM(company)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET company = TRIM(company);
```

```sql
SELECT DISTINCT Location_HQ
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET Location_HQ = 'Dusseldorf'
WHERE Location_HQ LIKE 'DÃ¼sseldorf';
 ```

```sql
UPDATE layoffs_duplicate
SET Location_HQ = 'Florianopolis'
WHERE Location_HQ LIKE 'FlorianÃ³polis';
```

```sql
UPDATE layoffs_duplicate
SET Location_HQ = 'Farde'
WHERE Location_HQ LIKE 'FÃ¸rde';
```

```sql
UPDATE layoffs_duplicate
SET Location_HQ = 'Malmo'
WHERE Location_HQ LIKE 'MalmÃ¶';
```

```sql
SELECT Location_HQ, TRIM(Location_HQ)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET Location_HQ = TRIM(Location_HQ);
```

```sql
SELECT Industry, TRIM(industry)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET industry = TRIM(industry);
```

```sql
SELECT Laid_Off_Count, TRIM(Laid_Off_Count)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET Laid_Off_Count = TRIM(Laid_Off_Count);
```

```sql
SELECT STAGE, TRIM(stage)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET Stage = TRIM(stage);
```

```sql
SELECT DISTINCT Country, TRIM(country)
FROM layoffs_duplicate;

UPDATE layoffs_duplicate
SET country = TRIM(country);
```

- **Conversion of data type**
```sql 
UPDATE layoffs_duplicate
SET Laid_Off_Count = NULL
WHERE Laid_Off_Count = '';

ALTER TABLE layoffs_duplicate
CHANGE COLUMN Laid_Off_Count Laid_Off_Count INT;
```

```sql
ALTER TABLE layoffs_duplicate
CHANGE COLUMN `date` `date` DATE;
```

```sql
UPDATE layoffs_duplicate
SET percentage = NULL
WHERE percentage = '';

ALTER TABLE layoffs_duplicate
CHANGE COLUMN percentage percentage DECIMAL(5,2);
```

- **Identifying and Handling Null and Blank Values**

```sql
SELECT *
FROM layoffs_duplicate
WHERE Percentage = ''
and Laid_Off_Count = '';
```

- Then, we delete them to reduce redundancy 

```sql
DELETE 
FROM layoffs_duplicate
WHERE Percentage = ''
AND Laid_Off_Count = ''
```

- Eliminate unnecessary columns to reduce redundancy.
```sql
ALTER TABLE layoffs_duplicate
DROP COLUMN `Source`,
DROP COLUMN List_of_Employees_Laid_Off;
```

### 2. Exploratory Data Analysis (EDA):

- Identify Companies, Industries, and countries, most affected by layoffs.
  
```sql
SELECT Company, SUM(Laid_Off_Count)
FROM layoffs_duplicate
GROUP BY Company
ORDER BY SUM(Laid_Off_Count) DESC;
```
```sql
SELECT industry, SUM(Laid_Off_Count)
FROM layoffs_duplicate
GROUP BY Industry
ORDER BY SUM(Laid_Off_Count) DESC;
```

```sql
SELECT Country, SUM(Laid_Off_Count)
FROM layoffs_duplicate
GROUP BY Country
ORDER BY SUM(Laid_Off_Count) DESC;
```

- Analyze trends over time (monthly, yearly).

```sql
SELECT substring(`date`,1,7) AS `Month`, SUM(Laid_Off_Count)
FROM layoffs_duplicate
GROUP BY `Month`
ORDER BY `Month` ASC
;
```
```sql
SELECT YEAR(`date`), SUM(Laid_Off_Count)
FROM layoffs_duplicate
GROUP BY YEAR(`date`)
ORDER BY SUM(Laid_Off_Count) DESC;
```

- Rank companies and industries by layoff impact

```sql
WITH Company_Year (Company, industry, Years, Laid_Off_Count) AS
(
	SELECT Company, Industry, YEAR(`date`), SUM(Laid_Off_Count)
	FROM layoffs_duplicate
	GROUP BY Company, industry, YEAR(`date`)
    ), Company_Year_Rank AS
(SELECT *, 
DENSE_RANK() OVER (PARTITION BY years ORDER BY Laid_Off_Count  DESC) AS Ranking
FROM Company_Year
WHERE Years IS NOT NULL
)
SELECT *
FROM Company_Year_Rank
WHERE Ranking <=5
;
```

```sql
SELECT 
	Industry, 
    SUM(Laid_Off_Count) as total_laid_off,
	(SUM(Laid_Off_Count)/(SELECT SUM(Laid_Off_Count) FROM layoffs_duplicate)) * 100 as Percentage_layoff
FROM  layoffs_duplicate
GROUP BY industry
ORDER BY Percentage_layoff ASC;
```

```sql
SELECT 
	Country, 
    SUM(Laid_Off_Count) as total_laid_off,
	(SUM(Laid_Off_Count)/(SELECT SUM(Laid_Off_Count) FROM layoffs_duplicate)) * 100 as Percentage_layoff
FROM  layoffs_duplicate
GROUP BY country
ORDER BY Percentage_layoff DESC;
```

```sql
SELECT 
	Company, 
    SUM(Laid_Off_Count) as total_laid_off,
	(SUM(Laid_Off_Count)/(SELECT SUM(Laid_Off_Count) FROM layoffs_duplicate)) * 100 as Percentage_layoff
FROM  layoffs_duplicate
GROUP BY Company
ORDER BY Percentage_layoff DESC;

```

```sql
SELECT 
	SUBSTRING(`date`, 1, 7) AS `Month`, 
    SUM(Laid_Off_Count) as total_laid_off,
	(SUM(Laid_Off_Count)/(SELECT SUM(Laid_Off_Count) FROM layoffs_duplicate)) * 100 as Percentage_layoff
FROM  layoffs_duplicate
GROUP BY  `Month`
ORDER BY Percentage_layoff DESC;
```

```sql
SELECT 
	YEAR(`date`),
    SUM(Laid_Off_Count) as total_laid_off,
	(SUM(Laid_Off_Count)/(SELECT SUM(Laid_Off_Count) FROM layoffs_duplicate)) * 100 as Percentage_layoff
FROM  layoffs_duplicate
GROUP BY  YEAR(`date`)
ORDER BY Percentage_layoff DESC;
```

### CALCULATING Year-over-Year (YoY) layoff increment
```sql
WITH Yearly_Layoffs AS (
    SELECT 
        YEAR(`date`) AS Year, 
        SUM(Laid_Off_Count) AS Total_Layoffs
    FROM layoffs_duplicate
    GROUP BY YEAR(`date`)
),
Yearly_Increment AS (
    SELECT 
        Year, 
        Total_Layoffs,
        LAG(Total_Layoffs) OVER (ORDER BY Year) AS Previous_Year_Layoffs,
        (Total_Layoffs - LAG(Total_Layoffs) OVER (ORDER BY Year)) AS YoY_Increment,
        ROUND(((Total_Layoffs - LAG(Total_Layoffs) OVER (ORDER BY Year)) 
                / LAG(Total_Layoffs) OVER (ORDER BY Year)) * 100, 2) AS YoY_Percentage_Change
    FROM Yearly_Layoffs
)
SELECT 
    Year,
    Total_Layoffs,
    Previous_Year_Layoffs,
    YoY_Increment,
    YoY_Percentage_Change
FROM Yearly_Increment
ORDER BY Year;
```


